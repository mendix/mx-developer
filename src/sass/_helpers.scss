@mixin transition($transition...) {
    @include prefix(transition, $transition, webkit moz o);
}

@mixin transform($transform...) {
    @include prefix(transform, $transform);
}

@mixin prefix($property, $value, $vendors: webkit moz ms o) {
      @if $vendors {
        @each $vendor in $vendors {
          #{"-" + $vendor + "-" + $property}: #{$value};
        }
      }
      #{$property}: #{$value};
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px,
    "xs": 768px,
    "sm": 992px,
    "md": 1200px
);

@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

%hidden {
  .hidden {
    display: none;
  }
}

@mixin box-shadow($vars, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $vars;
    -moz-box-shadow:inset $vars;
    box-shadow:inset $vars;
  } @else {
    -webkit-box-shadow: $vars;
    -moz-box-shadow: $vars;
    box-shadow: $vars;
  }
}

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

@mixin block($element) {
    .#{$element} {
        @content;
    }
}

/// Block Element
/// @access public
/// @param {String} $element - Element's name
@mixin element($element, $root: false) {
    @if $root {
      #{$root}__#{$element} {
          @content;
      }
    } @else {
      &__#{$element} {
          @content;
      }
    }
}

/// Block Modifier
/// @access public
/// @param {String} $modifier - Modifier's name
@mixin modifier($modifier, $root: false) {
  @if $root {
    #{$root}--#{$modifier} {
        @content;
    }
  } @else {
    &--#{$modifier} {
        @content;
    }
  }
}

/// @alias element
@mixin e($element) {
    @include element($element)  {
        @content;
    }
}

/// @alias modifier
@mixin m($modifier) {
    @include modifier($modifier) {
        @content;
    }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin speech-bubble($side: left, $offset-direction: top) {
  $offset: 16px;
  $size: 6px;
  $border-color: $color-submenu-border;
  $border-width: 2;

  margin-#{$side}: $size + ($border-width / 2);
  margin-#{opposite-direction($side)}: 4px;
  margin-bottom: 4px;
  &:after, &:before {
    content: "";
    display: block;
    position: absolute;
  }
  &:after {
    #{$offset-direction}: $offset;
  }
  &:before {
    #{$offset-direction}: $offset - $border-width;
  }
  &:after {
    border: $size solid transparent;
    border-#{opposite-direction($side)}: $size solid $color-white;
    #{$side}: -$size;
    border-#{$side}: none;
  }
  &:before {
    border: ($size + $border-width) solid transparent;
    border-#{opposite-direction($side)}: ($size + $border-width) solid $border-color;
    #{$side}: -($size + $border-width);
    border-#{$side}: none;
  }
}

@function opposite-direction($direction) {
  $opposite-direction: center;

  @if $direction == top {
    $opposite-direction: bottom;
  }
  @if $direction == bottom {
    $opposite-direction: top;
  }
  @if $direction == left {
    $opposite-direction: right;
  }
  @if $direction == right {
    $opposite-direction: left;
  }

  @return $opposite-direction;
}

@mixin no-text-decoration() {
  text-decoration: none;
  @include prefix('text-decoration-line', 'none!important', webkit moz);
}
