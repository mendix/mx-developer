$hamburger-padding-x                       : 15px !default;
$hamburger-padding-y                       : 15px !default;
$hamburger-layer-width                     : 20px !default;
$hamburger-layer-height                    : 2px !default;
$hamburger-layer-spacing                   : 6px !default;
$hamburger-layer-color                     : $color-font-darker-grey !default;
$hamburger-layer-border-radius             : 4px !default;
$hamburger-hover-opacity                   : 0.7 !default;
$hamburger-hover-transition-duration       : 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;

@include element('header-block') {
  @include element('hamburger') {
    padding: $hamburger-padding-y $hamburger-padding-x;
    display: inline-block;
    cursor: pointer;

    @include prefix(transition-property, 'opacity, filter', moz webkit o);
    @include prefix(transition-duration, $hamburger-hover-transition-duration, moz webkit o);
    @include prefix(transition-timing-function, $hamburger-hover-transition-timing-function, moz webkit o);

    // Normalize (<button>)
    font: inherit;
    color: inherit;
    text-transform: none;
    background-color: transparent;
    border: 0;
    margin: 0;
    overflow: visible;
    &, &:focus {
      outline: 0;
    }

    &:hover {
      @include opacity($hamburger-hover-opacity);
    }

    visibility: hidden;
    @include transition(visibility 150ms ease-in-out);
    @include transition(left 150ms ease-in-out);
    @include mq(sm, max) {
      visibility: visible;
      left: 5px;
    }

    position: absolute;
    top: 18px;
    left: -35px;
    line-height: 1;
  }

  @include element('hamburger-box') {
    width: $hamburger-layer-width;
    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
    display: inline-block;
    position: relative;
  }
  @include element('hamburger-inner') {
    display: block;
    top: 50%;
    margin-top: $hamburger-layer-height / -2;

    &,
    &::before,
    &::after {
      width: $hamburger-layer-width;
      height: $hamburger-layer-height;
      background-color: $hamburger-layer-color;
      @include border-radius($hamburger-layer-border-radius);
      position: absolute;
      @include prefix(transition-property, transform, moz webkit o);
      @include prefix(transition-duration, 0.15s, moz webkit o);
      @include prefix(transition-timing-function, ease, moz webkit o);
    }

    &::before,
    &::after {
      content: "";
      display: block;
    }

    &::before {
      top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }

    &::after {
      bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }

    // 3DX
    top: $hamburger-layer-height / 2;
    @include transition(background-color 0s 0.13s linear);

    &::before {
      top: $hamburger-layer-height + $hamburger-layer-spacing;
      @include transition(top 0.1s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
                  transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19));
    }

    &::after {
      top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
      @include transition(top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
                  transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19));
    }

    // 3DX
    @include modifier('active') {
      transition-delay: 0.22s;
      background-color: transparent;

      &::before {
        top: 0;
        @include transition(top 0.1s 0.15s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
                    transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1));
        transform: translate3d(0, $hamburger-layer-spacing + $hamburger-layer-height, 0) rotate(45deg);
      }

      &::after {
        top: 0;
        @include transition(top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
                    transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1));
        transform: translate3d(0, $hamburger-layer-spacing + $hamburger-layer-height, 0) rotate(-45deg);
      }
    }
  }
}
